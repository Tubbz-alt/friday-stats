/*
 * Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package buildLogWarnAnalyzer;

import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;

/**
 * Utility to analyze warnings from build logs generated in the new
 * build system.
 *
 * @author Dan Xu
 */
public class Main {
    private static List<File> inFiles = new ArrayList<>();

    public static void main(String[] args) throws IOException {
        new Main().run(args);
    }

    private void run(String[] args) throws IOException {
        for (String arg : args) {
            File logFile = new File(arg);
            if (logFile.exists())
                inFiles.add(logFile);
        }

        if (inFiles.isEmpty()) {
            showHelp();
        } else {
            Result rst = new Analyzer().analyze(inFiles);
            System.out.println(rst);
        }
    }

    private void showHelp() {
        System.out.println(Main.class.getPackage().getName() + ":");
        System.out.println("  Analyze compilation warnings from JDK build logs "
                + "generated by the new build system.");
        System.out.println();
        System.out.println("Usage:");
        System.out.println("  java -jar " + findJar(Main.class).getName() + " files...");
        System.out.println();
    }

    private File findJar(Class<?> c) {
        try {
            String className = c.getName().replace(".", "/") + ".class";
            // use URI to avoid encoding issues, e.g. Program%20Files
            URI uri = getClass().getClassLoader().getResource(className).toURI();
            if (uri.getScheme().equals("jar")) {
                String ssp = uri.getRawSchemeSpecificPart();
                int sep = ssp.lastIndexOf("!");
                uri = new URI(ssp.substring(0, sep));
                if (uri.getScheme().equals("file"))
                    return new File(uri.getPath());
            }
        } catch (URISyntaxException ignore) {
            ignore.printStackTrace(System.err);
        }

        return null;
    }
}
